datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
}

model Admin {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String
}

model Company {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String     @unique
  desc      String? // @db.VarChar(255)
  logo      String?
  customer  Customer[]
}

model Product {
  id              String      @id @default(cuid())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  name_ar         String
  name_en         String
  secintefic_name String
  active_material String?
  trade_name      String?
  unit            Unit        @default(MILLIGRAM)
  type            ProductType @default(CAPSULES)
  price           Float
  quantity        Int
  orders          Order[]
  categories      Category[]
}

model Category {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  products  Product[]
}

model Order {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])
  products   Product[]
}

model Customer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  phone     String   @unique
  name      String
  orders    Order[]
  planId    String?
  plan      Plan?    @relation(fields: [planId], references: [id])
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
}

model Plan {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String     @unique
  desc      String?
  price     Float
  customer  Customer[]
}

enum ProductType {
  LIQUID
  TABLET
  CAPSULES
}

enum Unit {
  KILOGRAM
  GRAM
  MILLIGRAM
  MICROGRAM
  LITER
  MILLILITER
  CUBICCENTIMETRE
  MOLE
  MILLIMOLE
}

generator client {
  provider = "prisma-client-js"
  // output   = "./outDir"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}
