datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
}

model Admin {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String
}

model Company {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  logo      String
  desc      String
}

model Product {
  id                   String                 @id @default(cuid())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  name_ar              String
  name_en              String
  secintefic_name      String
  active_material      String?
  trade_name           String?
  // units           Unit       @default(Bills)
  units                String?
  price                Int
  quantity             Int
  categories           Category[]
  orders               Order[]
  CategoriesOnProducts CategoriesOnProducts[]
}

model Category {
  id                   String                 @id @default(cuid())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  name                 String
  products             Product[]
  ProductsOnCategories CategoriesOnProducts[]
}

model CategoriesOnProducts {
  product    Product  @relation(fields: [productId], references: [id])
  productId  String // relation scalar field (used in the `@relation` attribute above)
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  // assignedBy String

  @@id([productId, categoryId])
}

model Order {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String?
  customer  User?     @relation(fields: [userId], references: [id])
  products  Product[]
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  firstName String?
  lastName  String?
  address   String?
  orders    Order[]
}

// enum Unit {
//   Bills
//   Caps
// }

generator client {
  provider = "prisma-client-js"
  output   = "./outDir"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}
